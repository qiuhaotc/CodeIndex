<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
    xmlns:local="clr-namespace:CodeIndex.VisualStudioExtension"
    xmlns:platformUI="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.15.0"
    xmlns:vsshell="clr-namespace:Microsoft.VisualStudio.Shell;assembly=Microsoft.VisualStudio.Shell.15.0">
    
    <!-- VS Theme-Aware Colors -->
    <SolidColorBrush x:Key="VsBackgroundBrush" Color="{DynamicResource {x:Static platformUI:EnvironmentColors.ToolWindowBackgroundColorKey}}" />
    <SolidColorBrush x:Key="VsForegroundBrush" Color="{DynamicResource {x:Static platformUI:EnvironmentColors.ToolWindowTextColorKey}}" />
    <SolidColorBrush x:Key="VsInputBackgroundBrush" Color="{DynamicResource {x:Static platformUI:EnvironmentColors.ComboBoxBackgroundColorKey}}" />
    <SolidColorBrush x:Key="VsInputForegroundBrush" Color="{DynamicResource {x:Static platformUI:EnvironmentColors.ComboBoxTextColorKey}}" />
    <SolidColorBrush x:Key="VsSelectionBrush" Color="{DynamicResource {x:Static platformUI:EnvironmentColors.SystemHighlightColorKey}}" />
    <SolidColorBrush x:Key="VsHeaderBackgroundBrush" Color="{DynamicResource {x:Static platformUI:EnvironmentColors.ToolWindowBackgroundColorKey}}" />
    <SolidColorBrush x:Key="VsButtonBackgroundBrush" Color="{DynamicResource {x:Static platformUI:EnvironmentColors.ComboBoxBackgroundColorKey}}" />
    <SolidColorBrush x:Key="VsButtonHoverBrush" Color="{DynamicResource {x:Static platformUI:EnvironmentColors.SystemHighlightColorKey}}" />
    <SolidColorBrush x:Key="VsAccentBrush" Color="{DynamicResource {x:Static platformUI:EnvironmentColors.AccentBorderColorKey}}" />
    <SolidColorBrush x:Key="VsWarningBrush" Color="OrangeRed" />
    
    <!-- Legacy fallback for non-VS themes -->
    <SolidColorBrush x:Key="StandardSolidColorBrush" Color="Blue" />
    
    <Style TargetType="{x:Type Label}" x:Key="CommonLabel">
        <Setter Property="Foreground" Value="{DynamicResource VsForegroundBrush}"/>
        <Setter Property="Margin" Value="2"/>
    </Style>
    
    <Style TargetType="{x:Type TextBox}" x:Key="CommonTextBox">
        <Setter Property="Background" Value="{DynamicResource VsInputBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource VsInputForegroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource VsAccentBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
    </Style>
    
    <Style TargetType="{x:Type DataGridRow}" x:Key="BaseGridStyle">
        <Setter Property="Foreground" Value="{DynamicResource VsForegroundBrush}"/>
        <Setter Property="Background" Value="{DynamicResource VsBackgroundBrush}"/>
    </Style>
    
    <Style TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Foreground" Value="{DynamicResource VsForegroundBrush}"/>
        <Setter Property="Background" Value="{DynamicResource VsHeaderBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource VsAccentBrush}"/>
        <Setter Property="BorderThickness" Value="0,0,0,1"/>
    </Style>
    
    <Style TargetType="{x:Type CheckBox}" x:Key="CommonCheckBox">
        <Setter Property="Foreground" Value="{DynamicResource VsForegroundBrush}"/>
        <Setter Property="FlowDirection" Value="RightToLeft"/>
        <Setter Property="Margin" Value="10 4 10 4"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Style.Resources>
            <Style TargetType="{x:Type Path}">
                <Setter Property="FlowDirection" Value="LeftToRight" />
            </Style>
        </Style.Resources>
    </Style>
    
    <Style TargetType="{x:Type ListView}">
        <Setter Property="Background" Value="{DynamicResource VsBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource VsForegroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource VsAccentBrush}"/>
    </Style>
    
    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="Background" Value="{DynamicResource VsInputBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource VsInputForegroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource VsAccentBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
    </Style>
    
    <Style x:Key="PanelForWrapPanel" TargetType="{x:Type DockPanel}">
        <Setter Property="MinHeight" Value="23"/>
        <Style.Resources>
            <Style TargetType="{x:Type Label}" BasedOn="{StaticResource CommonLabel}">
            </Style>
            <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource CommonTextBox}">
            </Style>
        </Style.Resources>
    </Style>
    
    <Style TargetType="{x:Type DataGridCell}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource VsForegroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource VsSelectionBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource VsForegroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource VsAccentBrush}"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource VsAccentBrush}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true"/>
                    <Condition Property="Selector.IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource VsSelectionBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource VsForegroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource VsAccentBrush}"/>
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style TargetType="{x:Type Button}" x:Key="InfoButton">
        <Setter Property="Width" Value="70"/>
        <Setter Property="Height" Value="25"/>
        <Setter Property="Foreground" Value="{DynamicResource VsForegroundBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{DynamicResource VsAccentBrush}"/>
        <Setter Property="Background" Value="{DynamicResource VsButtonBackgroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
                        <TextBlock Text="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource VsButtonHoverBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource VsSelectionBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="{x:Type Button}" x:Key="WarnButton">
        <Setter Property="Width" Value="80"/>
        <Setter Property="Height" Value="25"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{DynamicResource VsWarningBrush}"/>
        <Setter Property="Background" Value="{DynamicResource VsWarningBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
                        <TextBlock Text="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Opacity" Value="0.8"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Opacity" Value="0.6"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <local:StringToXamlConverter x:Key="StringToXamlConverter" />
    <ItemsPanelTemplate x:Key="ItemsPanelTemplateHorizontal">
        <WrapPanel Orientation="Horizontal" Margin="0,0,0,0"/>
    </ItemsPanelTemplate>
</ResourceDictionary>